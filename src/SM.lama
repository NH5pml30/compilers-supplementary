-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[s, v, w], insns) {
  case insns of
    {} -> c
  | i : tail ->
      c :=
        case i of
          READ         -> case readWorld(w) of [n, new_w] -> [n : s, v, new_w] esac
        | WRITE        -> case s of n : new_s -> [new_s, v, writeWorld(n, w)] esac
        | BINOP (op)   -> case s of rhs : lhs : new_s -> [evalBinop(op, lhs, rhs) : new_s, v, w] esac
        | LD    (x)    -> [v(x) : s, v, w]
        | ST    (x)    -> case s of n : new_s -> [new_s, v <- x :=: n, w] esac
        | CONST (n)    -> [n : s, v, w]
        | LABEL (s)    -> c
        | JMP   (l)    -> tail := fromLabel (env, l); c
        | CJMP  (cond, l) ->
          case s of n : s ->
            tail :=
              if case cond of
                  "z"  -> n == 0
                | "nz" -> n
              esac then fromLabel (env, l) else tail fi;
            [s, v, w]
          esac
        esac;
      eval (env, c, tail)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (name)   -> singletonBuffer (LD (name))
  | Const (n)  -> singletonBuffer (CONST (n))
  | Binop (op, lhs_e, rhs_e) -> compileExpr(lhs_e) <+> compileExpr(rhs_e) <+ BINOP (op)
  esac
}

-- Returns singletonBuffer (x) <+ y
public infix <<+ at <+ (x, y) {
  singletonBuffer (x) <+ y
}

-- Returns singletonBuffer (x) <+> y
public infix <<+> at <+> (x, y) {
  singletonBuffer (x) <+> y
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileWithEndLabel (env, stmt) {
    case env.genLabel of
      [endLabel, env] ->
        case compile (endLabel, env, stmt) of
          [endLabelUsed, env, code] -> [env, code <+> label (endLabel, endLabelUsed)]
        esac
    esac
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, ifBody, elseBody) ->
        case env.genLabel of
          [elseLab, env] ->
            case compile (lab, env, ifBody) of
              [_, env, ifCode] ->
                case compile (lab, env, elseBody) of
                  [_, env, elseCode] ->
                    [true, env, compileExpr (cond) <+ CJMP ("z", elseLab) <+> ifCode <+ JMP (lab) <+ LABEL (elseLab) <+> elseCode]
                esac
            esac
        esac
    | While (cond, body) ->
        case env.genLabel of
          [beginLab, env] ->
            case compileWithEndLabel (env, body) of
              [env, bodyCode] ->
                [true, env, LABEL (beginLab) <<+> compileExpr (cond) <+ CJMP ("z", lab) <+> bodyCode <+ JMP (beginLab)]
            esac
        esac
    | DoWhile (body, cond) ->
        case env.genLabel of
          [beginLab, env] ->
            case compileWithEndLabel (env, body) of
              [env, bodyCode] ->
                [false, env, LABEL (beginLab) <<+> bodyCode <+> compileExpr (cond) <+ CJMP ("nz", beginLab)]
            esac
        esac
    esac
  }  

  case compileWithEndLabel (initCompEnv (), stmt) of
    [_, code] -> getBuffer $ code
  esac
}
