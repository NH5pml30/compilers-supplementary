-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;


fun log(value) {
  var f = fopen("/proc/self/fd/2", "a");
  fprintf(f, "%s\n", string(value));
  fclose(f)
}

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  stringcat(map (fun (i) {showSMInsn (i) ++ "\n"}, prg))
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  fun createLocal(s, na, nl) {
    case take(s, na) of [s, args] ->
      [s, [listArray(args), initArray(nl, fun (_) {0})]]
    esac
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac;
    [args, locs]
  }

  infix <- before : (state, [x, v]) {
    assign(state, x, v)
  }

  infix :=: after <- (x, v) { [x, v] }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, hd(list) : acc, tl(list))
      fi
    }

    inner (n, {}, list)
  }

  fun setStack(c@[s, sc, v, w], ss) {
    [ss, sc, v, w]
  }
  fun setCStack(c@[s, sc, v, w], scc) {
    [s, scc, v, w]
  }
  fun setState(c@[s, sc, v, w], vv) {
    [s, sc, vv, w]
  }
  fun setWorld(c@[s, sc, v, w], ww) {
    [s, sc, v, ww]
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[s, sc, v, w], insns) {
    case insns of
      {} -> c
    | i : tail ->
        c :=
          case i of
            BINOP (op)   -> case s of rhs : lhs : s -> setStack(c, evalOp(op, lhs, rhs) : s) esac
          | LD    (x)    -> setStack(c, lookup(v, x) : s)
          | LDA   (x)    -> setStack(c, Ref (x) : s)
          | ST    (x)    -> case s of n : s -> setState(setStack(c, s), v <- x :=: n) esac
          (* | STI          ->
              case s of Ref (x) : ass : s ->
                setState(setStack(c, s), v <- x :=: ass)
              esac *)
          | SEXP (id, n) -> tail := ARRAY (n) : tail; c
          | CONST (n)    -> setStack(c, n : s)
          | LABEL (s)    -> c
          | JMP   (l)    -> tail := fromLabel (env, l); c
          | CJMP  (cond, l) ->
              case s of n : s ->
                tail :=
                  if case cond of
                      "z"  -> n == 0
                    | "nz" -> n
                  esac then fromLabel (env, l) else tail fi;
                setStack(c, s)
              esac
          | CALL (f, _) ->
              var ret = tail;
              tail := fromLabel(env, f);
              setCStack(c, [v, ret] : sc)
          | BEGIN (_, na, nl) ->
              case createLocal(s, na, nl) of [s, v] ->
                setStack(setState(c, v), s)
              esac
          | GLOBAL (x) -> setState(c, v <- Glb (x) :=: 0)
          | END  -> case sc of
                {} -> tail := {}; c
              | [v, ret] : sc -> tail := ret; setCStack(setState(c, v), sc)
              esac
          | DUP  -> case s of n : _ -> setStack(c, n : s) esac
          | DROP -> case s of n : s -> setStack(c, s) esac
          | STRING (st) -> setStack(c, st : s)
          | ARRAY (n) -> case take(s, n) of [s, args] ->
                setStack(c, listArray(args) : s)
              esac
          | STA ->
              case s of
                Ref (x) : va : s -> setState(setStack(c, s), v <- x :=: va)
              | i : a : va : s ->
                  a[i] := va;
                  setStack(c, s)
              esac
          | ELEM -> case s of i : a : s ->
                setStack(c, a[i] : s)
              esac
          | BUILTIN (f, n) -> case take(s, n) of [s, args] ->
                case evalBuiltin(f, args, w) of [va, w] ->
                  setStack(setWorld(c, w), va : s)
                esac
              esac
          esac;
        eval (c, tail)
    esac
  }

  getOutput(eval ([{}, {}, makeState (0, 0), w], insns) [3])
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Returns singletonBuffer (x) <+ y
public infix <<+ at <+ (x, y) {
  singletonBuffer (x) <+ y
}

-- Returns singletonBuffer (x) <+> y
public infix <<+> at <+> (x, y) {
  singletonBuffer (x) <+> y
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using env.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileWithEndLabel (env, stmt) {
    case genLabel(env) of
      [endLabel, env] ->
        case compile (endLabel, env, stmt) of
          [endLabelUsed, env, code] -> [env, code <+> label (endLabel, endLabelUsed)]
        esac
    esac
  }

  fun compileListWithEndLabel(env, list) {
    foldl(fun ([env, code], arg) {
      case compileWithEndLabel(env, arg) of [env, argCode] ->
        [env, code <+> argCode]
      esac
    }, [env, emptyBuffer()], list)
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Ignore (e)  -> case compileWithEndLabel (env, e) of [env, code] -> [false, env, code <+ DROP] esac
    | Skip        -> [false, env, emptyBuffer ()]
    | Var (name)  -> [false, env, singletonBuffer (LD (lookupVal(env, name)))]
    | Ref (name)  -> [false, env, singletonBuffer (LDA (lookupVar(env, name)))]
    | ElemRef (arr, ind) ->
        case compileWithEndLabel(env, arr) of [env, arr] ->
          case compile(lab, env, ind) of [used, env, ind] ->
            [used, env, arr <+> ind]
          esac
        esac
    | Const (n)   -> [false, env, singletonBuffer (CONST (n))]
    | String (x)  -> [false, env, singletonBuffer (STRING (x))]
    | Array  (x)  -> case compileListWithEndLabel(env, x) of [env, code] ->
        [false, env, code <+ ARRAY (size(x))]
      esac
    | Sexp (name, args) -> case compileListWithEndLabel(env, args) of [env, code] ->
        [false, env, code <+ SEXP (name, size(args))]
      esac
    | Binop (op, lhs_e, rhs_e) ->
        case compileListWithEndLabel(env, {lhs_e, rhs_e}) of [env, lrhs_code] ->
          [false, env, lrhs_code <+ BINOP (op)]
        esac
    | Set (name, e) -> compile(lab, env, Assn (Ref (name), e))
    | Assn (Ref (name), e) -> case compileWithEndLabel (env, e) of [env, code] -> [false, env, code <+ DUP <+ ST (lookupVar(env, name))] esac
    | Assn (refe, e) ->
        case compileWithEndLabel (env, refe) of [env, refe_code] ->
          case compileWithEndLabel (env, e) of [env, code] ->
            [false, env, code <+ DUP <+> refe_code <+ STA]
          esac
        esac
    | Seq (s1, s2) ->
        case genLabel(env) of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | Read  (name)   -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, name))]
    | Write (e)      -> case compileWithEndLabel (env, e) of [env, code] -> [false, env, code <+ WRITE] esac
    | Elem (arr, ind) -> case compileListWithEndLabel(env, {arr, ind}) of [env, codeai] ->
          [false, env, codeai <+ ELEM]
        esac
    | If (cond, ifBody, elseBody) ->
        case genLabel(env) of [elseLab, env] ->
          case compileWithEndLabel (env, cond) of [env, condCode] ->
            case compile (lab, env, ifBody) of [_, env, ifCode] ->
              case compile (lab, env, elseBody) of [_, env, elseCode] ->
                [true, env, condCode <+ CJMP ("z", elseLab) <+> ifCode <+ JMP (lab) <+ LABEL (elseLab) <+> elseCode]
              esac
            esac
          esac
        esac
    | While (cond, body) ->
        case genLabel(env) of [beginLab, env] ->
          case compileWithEndLabel (env, cond) of [env, condCode] ->
            case compile (beginLab, env, body) of [_, env, bodyCode] ->
              [true, env, LABEL (beginLab) <<+> condCode <+ CJMP ("z", lab) <+> bodyCode <+ JMP (beginLab)]
            esac
          esac
        esac
    | DoWhile (body, cond) ->
        case genLabel(env) of [beginLab, env] ->
          case compileWithEndLabel (env, cond) of [env, condCode] ->
            case compileWithEndLabel (env, body) of [env, bodyCode] ->
              [false, env, LABEL (beginLab) <<+> bodyCode <+> condCode <+ CJMP ("nz", beginLab)]
            esac
          esac
        esac
    | Scope (defs, expr) ->
        case foldl(fun ([env, code], d) {
          case d of
            Var (xs) ->
              [addVars(env, xs),
               if isGlobal(env) then foldl(fun (c, x) { c <+ GLOBAL (x) }, code, xs) else code fi]
          | Fun (name, args, body) ->
              case genFunLabel(env, name) of [fLabel, env] ->
                [addFun(env, name, fLabel, size(args)), code]
              esac
          esac
        }, [beginScope(env), emptyBuffer()], defs) of [env, defsCode] ->
          case foldl(fun (env, d) {
            case d of
              Fun (name, args, body) -> case lookupFun(env, name) of Fun (fLabel, _) ->
                rememberFun(env, fLabel, args, body)
              esac
            | Var (x) -> env
            esac
          }, env, defs) of env ->
            case compile(lab, env, expr) of [labUsed, env, code] ->
              [labUsed, endScope(env), defsCode <+> code]
            esac
          esac
        esac
    | Call (name, args) ->
        case lookupFun(env, name) of Fun (fLabel, _) ->
          case compileListWithEndLabel(env, args) of [env, argsCode] ->
            [false, env, argsCode <+ (
              if fLabel[0] == '$'
              then BUILTIN (name, size(args))
              else CALL (fLabel, size(args))
              fi
            )]
            esac
        esac
    esac
  }

  fun functionFrame(env, fLabel, na, code) {
    LABEL (fLabel) <<+ BEGIN (fLabel, na, getLocals(env)) <+> code <+ END
  }

  case compileWithEndLabel (initCompEnv ().beginScope
                              .addFun ("read"  , "$read"  , 0)
                              .addFun ("write" , "$write" , 1)
                              .addFun ("length", "$length", 1), stmt) of
    [env, code] ->
      code := functionFrame(env, "main", 0, code);
      do
        var run = true;
        case getFuns(env) of [funs, envn] ->
          run := size(funs) != 0;
          env := foldl(fun (env, f@(Fun (fLabel, args, body, state))) {
            case foldl(addArg, beginFun(env, state), args) of env ->
              case compileWithEndLabel(env, body) of [env, funCode] ->
                code := code <+> functionFrame(env, fLabel, size(args), funCode);
                env
              esac
            esac
          }, envn, funs)
        esac
      while run od;
      getBuffer(code)
  esac
}
