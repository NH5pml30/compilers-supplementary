-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalSMInsn (c@[s, v, w], i) {
  case i of
    READ       -> case readWorld(w) of [n, new_w] -> [n : s, v, new_w] esac
  | WRITE      -> case s of n : new_s -> [new_s, v, writeWorld(n, w)] esac
  | BINOP (op) -> case s of rhs : lhs : new_s -> [evalBinop(op, lhs, rhs) : new_s, v, w] esac
  | LD    (x)  -> [v(x) : s, v, w]
  | ST    (x)  -> case s of n : new_s -> [new_s, v <- x :=: n, w] esac
  | CONST (n)  -> [n : s, v, w]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | i : tail -> eval(evalSMInsn(c, i), tail)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (name)   -> { LD (name) }
  | Const (n)  -> { CONST (n) }
  | Binop (op, lhs_e, rhs_e) -> compileExpr(lhs_e) +++ compileExpr(rhs_e) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (name, expr) -> compileExpr(expr) +++ { ST (name) }
  | Seq (s1, s2)      -> compileSM(s1) +++ compileSM(s2)
  | Skip              -> {}
  | Read (name)       -> { READ, ST (name) }
  | Write (expr)      -> compileExpr(expr) +++ { WRITE }
  esac
}
