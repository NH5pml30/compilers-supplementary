-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {addName(s, name, Var (0))}, state, names)
}

-- Helper function: adds initialized variables to the current scope
fun addNamesInit (state, names, vals) {
  foldl (fun (s, [name, v]) {addName(s, name, Var (v))}, state, zip(names, vals))
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  addName(state, name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun handleDefs(s, defs) {
  case defs of
    {} -> s
  | d : ds ->
      handleDefs(
        case d of
          Var (x) -> addNames(s, x)
        | Fun (name, args, body) -> addFunction(s, name, args, body)
        esac,
        ds
      )
  esac
}


fun eval (c@[s, w], expr) {
  (* log(expr); *)
  case expr of
    Scope (defs, expr) ->
      case eval([handleDefs(enterScope(s), defs), w], expr) of [c@[s, w], v] ->
        [[leaveScope(s), w], v]
      esac
  | Ignore (x) -> eval (c, x)
  | Skip       -> [c, 0]
  | Var (name) -> case lookup(s, name) of Var (v) -> [c, v] esac
  | Ref (name) -> [c, fun (s, v) { s <- name :=: v }]
  | Const (n) -> [c, n]
  | String (x) -> [c, x]
  | Array  (x) -> case evalList(c, x) of [c, l] -> [c, listArray(l)] esac
  | Sexp (_, args) -> eval(c, Array (args)) 
  | Binop (op, lhs_e, rhs_e) ->
      case eval(c, lhs_e) of [c, lhs] ->
        case eval(c, rhs_e) of [c, rhs] ->
          [c, evalOp(op, lhs, rhs)]
        esac
      esac
  | Set (name, expr) -> eval (c, Assn (Ref (name), expr))
  | Assn (ref, expr) -> case eval (c, ref) of [c@[s, w], action] ->
        case eval (c, expr) of [[s, w], v] -> [[action(s, v), w], v] esac
      esac
  | Assn (Ref (name), expr) ->
      case eval (c, expr) of [[s, w], v] -> [[s <- name :=: v, w], v] esac
  | Seq (s1, s2) ->
      case eval(c, s1) of [c, _] ->
        case eval(c, s2) of [c, v] ->
          [c, v]
        esac
      esac
  | Elem (arr, ind) -> case evalList(c, {arr, ind}) of [c, {arr, ind}] -> [c, arr[ind]] esac
  | ElemRef (arr, ind) -> case evalList(c, {arr, ind}) of [c, {arr, ind}] ->[c, fun (s, v) { arr[ind] := v; s }] esac
  | If (cond, ifBody, elseBody) -> case eval(c, cond) of [c, v] ->
      eval (c, if v then ifBody else elseBody fi)
    esac
  | While (cond, body) -> case eval(c, cond) of [c, v] ->
      if v then case eval (c, body) of [c, _] -> eval (c, While (cond, body)) esac else [c, 0] fi
    esac
  | DoWhile (body, cond) ->
      case eval (c, body) of [c, _] ->
        case eval (c, cond) of [c, v] ->
          if v then eval (c, DoWhile (body, cond)) else [c, 0] fi
        esac
      esac
  | Call (name, args) ->
      case lookupFun(s, name) of Fun (argNames, body) ->
          case evalList(c, args) of [c@[s, w], argVals] ->
            case body of
              External -> case evalBuiltin(name, argVals, w) of [v, w] -> [[s, w], v] esac
            | _ -> case eval([addNamesInit(enterFunction(s), argNames, argVals), w], body) of [[s_res, w], res] ->
                  [[leaveFunction(s, getGlobal(s_res)), w], res]
                esac
            esac
          esac
        esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> getOutput(snd(c))
  esac
}
