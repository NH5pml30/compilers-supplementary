-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

public fun evalBinop(op, lhs, rhs) {
  case op of
    "+"  -> lhs + rhs
  | "-"  -> lhs - rhs
  | "*"  -> lhs * rhs
  | "/"  -> lhs / rhs
  | "%"  -> lhs % rhs
  | "<"  -> lhs < rhs
  | ">"  -> lhs > rhs
  | "<=" -> lhs <= rhs
  | ">=" -> lhs >= rhs
  | "==" -> lhs == rhs
  | "!=" -> lhs != rhs
  | "&&" -> lhs && rhs
  | "!!" -> lhs !! rhs
  esac
}

public fun eval (c@[s, w], expr) {
  case expr of
    Ignore (x) -> eval (c, x)
  | Skip       -> [c, 0]
  | Var (name) -> [c, s(name)]
  | Ref (name) -> [c, Ref (name)]
  | Const (n) -> [c, n]
  | Binop (op, lhs_e, rhs_e) ->
      case eval(c, lhs_e) of [c, lhs] ->
        case eval(c, rhs_e) of [c, rhs] ->
          [c, evalOp(op, lhs, rhs)]
        esac
      esac
  | Assn (ref, expr) -> case eval (c, ref) of [c@[s, w], Ref (name)] ->
        case eval (c, expr) of [[s, w], v] -> [[s <- name :=: v, w], v] esac
      esac
  | Assn (Ref (name), expr) ->
      case eval (c, expr) of [[s, w], v] -> [[s <- name :=: v, w], v] esac
  | Seq (s1, s2) ->
      case eval(c, s1) of [c, _] ->
        case eval(c, s2) of [c, v] ->
          [c, v]
        esac
      esac
  | Read (name)       -> case readWorld(w) of [n, w] -> [[s <- name :=: n, w], 0] esac
  | Write (expr)      ->
      case eval(c, expr) of [c, v] ->
        case c of [s, w] ->
          [[s, writeWorld(v, w)], 0]
        esac
      esac
  | If (cond, ifBody, elseBody) -> case eval(c, cond) of [c, v] ->
      eval (c, if v then ifBody else elseBody fi)
    esac
  | While (cond, body) -> case eval(c, cond) of [c, v] ->
      if v then case eval (c, body) of [c, _] -> eval (c, While (cond, body)) esac else [c, 0] fi
    esac
  | DoWhile (body, cond) ->
      case eval (c, body) of [c, _] ->
        case eval (c, cond) of [c, v] ->
          if v then eval (c, DoWhile (body, cond)) else [c, 0] fi
        esac
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
